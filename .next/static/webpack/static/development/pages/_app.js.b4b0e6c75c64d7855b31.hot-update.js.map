{"version":3,"file":"static/webpack/static/development/pages/_app.js.b4b0e6c75c64d7855b31.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["import React from \"react\";\nimport App from \"next/app\";\nimport Menu from \"../components/menu\";\nimport Container from \"../components/Container\";\nimport Footer from \"../components/footer\";\nimport AccessToken from \"../components/AccessToken\";\nimport Head from \"next/head\";\nimport Router from \"next/router\";\nimport { Provider } from \"react-redux\";\nimport { connect } from \"react-redux\";\nimport withReduxStore from \"../with-redux-store\";\nimport queryString from \"query-string\";\n\nimport \"../styles/_app.scss\";\nimport _ from \"lodash\";\nimport axios from \"axios\";\nimport config from \"../config\";\n\nclass CustomApp extends App {\n    static async getInitialProps({ ctx }) {\n        const res = ctx.res ? ctx.res : false;\n        const spotifyAuth = res.spotifyAuth || config.spotifyAuth;\n        const query = res.req ? res.req.query : {};\n        const host = res.req ? res.req.headers.host : \"\";\n\n        let authed = false;\n        let accessToken = {};\n        if (query.code && host) {\n            try {\n                const response = await axios.post(\n                    `http://${host}/spotify/auth?${queryString.stringify(\n                        query\n                    )}`\n                );\n                if (response.status == 200 && response.data) {\n                    authed = true;\n                    accessToken = response.data;\n                }\n            } catch (e) {\n                console.log(e);\n            }\n        }\n\n        return { query, spotifyAuth, authed: authed, at: accessToken };\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            enabled: false\n        };\n    }\n\n    componentDidMount() {\n        Router.replace(location.pathname);\n    }\n\n    render() {\n        const { Component, pageProps, reduxStore, at } = this.props;\n        const enabled = !!_.get(reduxStore.getState(), \"Spotify.accessToken\");\n        return (\n            <Provider store={reduxStore}>\n                <Head key=\"head\">\n                    <title>Musikit</title>\n                </Head>\n                {enabled ? (\n                    <React.Fragment>\n                        <div className=\"flex-container\">\n                            <Menu />\n                            <Container>\n                                <Component {...pageProps} />\n                            </Container>\n                        </div>\n                        <Footer />\n                    </React.Fragment>\n                ) : at ? (\n                    <AccessToken at={at} />\n                ) : null}\n            </Provider>\n        );\n    }\n}\n\nexport default withReduxStore(CustomApp);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;;;;;;;AAEA;AACA;;AADA;AACA;AAIA;AACA;AACA;AACA;AACA;;;;;;;AACA;AACA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AADA;AAFA;AAKA;AACA;;;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAKA;AAAA;AASA;AAAA;AAIA;;;;AA9DA;AACA;AAgEA;;;;A","sourceRoot":""}