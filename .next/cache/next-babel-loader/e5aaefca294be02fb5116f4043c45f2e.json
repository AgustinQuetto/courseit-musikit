{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { initializeStore } from \"../store\";\nconst isServer = true;\nconst __NEXT_REDUX_STORE__ = \"__NEXT_REDUX_STORE__\";\n\nfunction getOrCreateStore(initialState) {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (isServer) {\n    return initializeStore(initialState);\n  } // Create store if unavailable on the client and set it on the window object\n\n\n  if (!window[__NEXT_REDUX_STORE__]) {\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\n  }\n\n  return window[__NEXT_REDUX_STORE__];\n}\n\nexport default (App => {\n  return class AppWithRedux extends React.Component {\n    static async getInitialProps(appContext) {\n      // Get or Create the store with `undefined` as initialState\n      // This allows you to set a custom default initialState\n      const reduxStore = getOrCreateStore(); // Provide the store to getInitialProps of pages\n\n      appContext.ctx.reduxStore = reduxStore;\n      let appProps = {};\n\n      if (typeof App.getInitialProps === \"function\") {\n        appProps = await App.getInitialProps(appContext);\n      }\n\n      return _objectSpread({}, appProps, {\n        initialReduxState: reduxStore.getState()\n      });\n    }\n\n    constructor(props) {\n      super(props);\n      this.reduxStore = getOrCreateStore(props.initialReduxState);\n    }\n\n    render() {\n      return __jsx(App, _extends({}, this.props, {\n        reduxStore: this.reduxStore\n      }));\n    }\n\n  };\n});","map":{"version":3,"sources":["/Users/agustinquetto/Documents/GitHub/courseit-musikit/with-redux-store/index.js"],"names":["React","initializeStore","isServer","__NEXT_REDUX_STORE__","getOrCreateStore","initialState","window","App","AppWithRedux","Component","getInitialProps","appContext","reduxStore","ctx","appProps","initialReduxState","getState","constructor","props","render"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,UAAhC;AAEA,MAAMC,QAAQ,OAAd;AACA,MAAMC,oBAAoB,GAAG,sBAA7B;;AAEA,SAASC,gBAAT,CAA0BC,YAA1B,EAAwC;AACpC;AACA,MAAIH,QAAJ,EAAc;AACV,WAAOD,eAAe,CAACI,YAAD,CAAtB;AACH,GAJmC,CAMpC;;;AACA,MAAI,CAACC,MAAM,CAACH,oBAAD,CAAX,EAAmC;AAC/BG,IAAAA,MAAM,CAACH,oBAAD,CAAN,GAA+BF,eAAe,CAACI,YAAD,CAA9C;AACH;;AACD,SAAOC,MAAM,CAACH,oBAAD,CAAb;AACH;;AAED,gBAAeI,GAAG,IAAI;AAClB,SAAO,MAAMC,YAAN,SAA2BR,KAAK,CAACS,SAAjC,CAA2C;AAC9C,iBAAaC,eAAb,CAA6BC,UAA7B,EAAyC;AACrC;AACA;AACA,YAAMC,UAAU,GAAGR,gBAAgB,EAAnC,CAHqC,CAKrC;;AACAO,MAAAA,UAAU,CAACE,GAAX,CAAeD,UAAf,GAA4BA,UAA5B;AAEA,UAAIE,QAAQ,GAAG,EAAf;;AACA,UAAI,OAAOP,GAAG,CAACG,eAAX,KAA+B,UAAnC,EAA+C;AAC3CI,QAAAA,QAAQ,GAAG,MAAMP,GAAG,CAACG,eAAJ,CAAoBC,UAApB,CAAjB;AACH;;AAED,+BACOG,QADP;AAEIC,QAAAA,iBAAiB,EAAEH,UAAU,CAACI,QAAX;AAFvB;AAIH;;AAEDC,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,YAAMA,KAAN;AACA,WAAKN,UAAL,GAAkBR,gBAAgB,CAACc,KAAK,CAACH,iBAAP,CAAlC;AACH;;AAEDI,IAAAA,MAAM,GAAG;AACL,aAAO,MAAC,GAAD,eAAS,KAAKD,KAAd;AAAqB,QAAA,UAAU,EAAE,KAAKN;AAAtC,SAAP;AACH;;AA3B6C,GAAlD;AA6BH,CA9BD","sourcesContent":["import React from \"react\";\nimport { initializeStore } from \"../store\";\n\nconst isServer = typeof window === \"undefined\";\nconst __NEXT_REDUX_STORE__ = \"__NEXT_REDUX_STORE__\";\n\nfunction getOrCreateStore(initialState) {\n    // Always make a new store if server, otherwise state is shared between requests\n    if (isServer) {\n        return initializeStore(initialState);\n    }\n\n    // Create store if unavailable on the client and set it on the window object\n    if (!window[__NEXT_REDUX_STORE__]) {\n        window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\n    }\n    return window[__NEXT_REDUX_STORE__];\n}\n\nexport default App => {\n    return class AppWithRedux extends React.Component {\n        static async getInitialProps(appContext) {\n            // Get or Create the store with `undefined` as initialState\n            // This allows you to set a custom default initialState\n            const reduxStore = getOrCreateStore();\n\n            // Provide the store to getInitialProps of pages\n            appContext.ctx.reduxStore = reduxStore;\n\n            let appProps = {};\n            if (typeof App.getInitialProps === \"function\") {\n                appProps = await App.getInitialProps(appContext);\n            }\n\n            return {\n                ...appProps,\n                initialReduxState: reduxStore.getState()\n            };\n        }\n\n        constructor(props) {\n            super(props);\n            this.reduxStore = getOrCreateStore(props.initialReduxState);\n        }\n\n        render() {\n            return <App {...this.props} reduxStore={this.reduxStore} />;\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}