{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport App from \"next/app\";\nimport Menu from \"../components/menu\";\nimport Container from \"../components/Container\";\nimport Footer from \"../components/footer\";\nimport AccessToken from \"../components/AccessToken\";\nimport Head from \"next/head\";\nimport Router from \"next/router\";\nimport Cookies from \"js-cookie\";\nimport { initializeStore } from \"../store\";\nimport { Provider } from \"react-redux\";\nimport { connect } from \"react-redux\";\nimport withReduxStore from \"../with-redux-store\";\nimport queryString from \"query-string\";\nimport \"../styles/_app.scss\";\nimport _ from \"lodash\";\nimport axios from \"axios\";\nimport config from \"../config\";\n\nclass CustomApp extends App {\n  static async getInitialProps({\n    ctx\n  }) {\n    const res = ctx.res ? ctx.res : false;\n    const spotifyAuth = res.spotifyAuth || config.spotifyAuth;\n    const query = res.req ? res.req.query : {};\n    const host = res.req ? res.req.headers.host : \"\";\n    let authed = false;\n\n    if (query.code && host) {\n      try {\n        const response = await axios.post(`http://${host}/spotify/auth?${queryString.stringify(query)}`);\n        console.log(response.data);\n\n        if (response.status == 200 && response.data) {\n          authed = true;\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    return {\n      query,\n      spotifyAuth,\n      authed: authed\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      enabled: false\n    };\n  }\n\n  componentDidMount() {\n    Router.replace(location.pathname);\n    /* const { query, cookies, spotifyAuth } = this.props;\n    let pass = true;\n    if (!cookies.code && !query.code) {\n        location.href = spotifyAuth;\n        pass = false;\n    } else if (query.code && !cookies.code) {\n        Cookies.set(\"code\", query.code);\n        Router.replace(location.pathname);\n    }\n    this.setState({ enabled: pass }); */\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      reduxStore\n    } = this.props;\n    const enabled = !!reduxStore.getState().Spotify.access_token;\n    return __jsx(Provider, {\n      store: reduxStore\n    }, __jsx(Head, {\n      key: \"head\"\n    }, __jsx(\"title\", null, \"Musikit\")), enabled ? __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"flex-container\"\n    }, __jsx(Menu, null), __jsx(Container, null, __jsx(Component, pageProps))), __jsx(Footer, null)) : __jsx(AccessToken, null));\n  }\n\n}\n\nexport default withReduxStore(CustomApp);","map":{"version":3,"sources":["/Users/agustinquetto/Documents/GitHub/courseit-musikit/pages/_app.js"],"names":["React","App","Menu","Container","Footer","AccessToken","Head","Router","Cookies","initializeStore","Provider","connect","withReduxStore","queryString","_","axios","config","CustomApp","getInitialProps","ctx","res","spotifyAuth","query","req","host","headers","authed","code","response","post","stringify","console","log","data","status","e","constructor","props","state","enabled","componentDidMount","replace","location","pathname","render","Component","pageProps","reduxStore","getState","Spotify","access_token"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport App from \"next/app\";\nimport Menu from \"../components/menu\";\nimport Container from \"../components/Container\";\nimport Footer from \"../components/footer\";\nimport AccessToken from \"../components/AccessToken\";\nimport Head from \"next/head\";\nimport Router from \"next/router\";\nimport Cookies from \"js-cookie\";\nimport { initializeStore } from \"../store\";\nimport { Provider } from \"react-redux\";\nimport { connect } from \"react-redux\";\nimport withReduxStore from \"../with-redux-store\";\nimport queryString from \"query-string\";\n\nimport \"../styles/_app.scss\";\nimport _ from \"lodash\";\nimport axios from \"axios\";\nimport config from \"../config\";\n\nclass CustomApp extends App {\n    static async getInitialProps({ ctx }) {\n        const res = ctx.res ? ctx.res : false;\n        const spotifyAuth = res.spotifyAuth || config.spotifyAuth;\n        const query = res.req ? res.req.query : {};\n        const host = res.req ? res.req.headers.host : \"\";\n\n        let authed = false;\n        if (query.code && host) {\n            try {\n                const response = await axios.post(\n                    `http://${host}/spotify/auth?${queryString.stringify(\n                        query\n                    )}`\n                );\n                console.log(response.data);\n                if (response.status == 200 && response.data) {\n                    authed = true;\n                }\n            } catch (e) {\n                console.log(e);\n            }\n        }\n\n        return { query, spotifyAuth, authed: authed };\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            enabled: false\n        };\n    }\n\n    componentDidMount() {\n        Router.replace(location.pathname);\n        /* const { query, cookies, spotifyAuth } = this.props;\n        let pass = true;\n        if (!cookies.code && !query.code) {\n            location.href = spotifyAuth;\n            pass = false;\n        } else if (query.code && !cookies.code) {\n            Cookies.set(\"code\", query.code);\n            Router.replace(location.pathname);\n        }\n        this.setState({ enabled: pass }); */\n    }\n\n    render() {\n        const { Component, pageProps, reduxStore } = this.props;\n        const enabled = !!reduxStore.getState().Spotify.access_token;\n        return (\n            <Provider store={reduxStore}>\n                <Head key=\"head\">\n                    <title>Musikit</title>\n                </Head>\n                {enabled ? (\n                    <React.Fragment>\n                        <div className=\"flex-container\">\n                            <Menu />\n                            <Container>\n                                <Component {...pageProps} />\n                            </Container>\n                        </div>\n                        <Footer />\n                    </React.Fragment>\n                ) : (\n                    <AccessToken />\n                )}\n            </Provider>\n        );\n    }\n}\n\nexport default withReduxStore(CustomApp);\n"]},"metadata":{},"sourceType":"module"}